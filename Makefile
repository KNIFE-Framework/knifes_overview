# -------------------------
# üìÑ Makefile ‚Äì Docusaurus + Git Utils (unified)
# Date: 20250815-0950 (patched, cleaned 20250916)
# Description: In≈°tal√°cia, build, testy, valid√°cia a WorkTree deploy.
# CESTA 2 (Actions) dopln√≠me nesk√¥r ‚Äì tento Makefile je z√°merne jednotn√Ω.
#
# ‚ùó D√¥le≈æit√©: pri deployi do worktree NIKDY nema≈æ prieƒçinok/s√∫bor .git.
# Ak je worktree ‚Äûrozbit√©‚Äú, pou≈æi:  make check-worktree  (self-healing)
# -------------------------

# ‚ùó Worktree deploy vy≈æaduje lok√°lnu GIT autentik√°ciu k GitHubu.
#    Bez platn√©ho HTTPS tokenu (osxkeychain) alebo SSH kƒæ√∫ƒça `git push` zlyh√°.
#    Pozri: make help-auth
# Keƒè spust√≠≈° len `make`, uk√°≈æ help
.DEFAULT_GOAL := help  # zobrazenie help pri samotnom `make`

SHELL := /bin/bash
NODE := node
NPM  := npm

DOCS_DIR  := docs
BUILD_DIR := build

# Build timestamp in UTC (used for footer "Last build")
BUILD_DATE := $(shell date -u '+%Y-%m-%d %H:%M:%S UTC')
# Release helpers (local tag push)
BRANCH ?= main
DATE   := $(shell date -u +%Y%m%d-%H%M%SZ)
VERSION ?= v$(DATE)
MSG     ?= Release $(VERSION)

# üåø Worktree deploy
DEPLOY_BRANCH = gh-pages-docusaurus
WORKTREE_DIR  = ../$(DEPLOY_BRANCH)
PAGES_DIR     = $(WORKTREE_DIR)/docs   # <- GH Pages ‚Äû/docs‚Äú re≈æim

# macOS sed (BSD) potrebuje -i ''
SED_INPLACE := sed -E -i ''
FIND_MD := find $(DOCS_DIR) -type f \( -name "*.md" -o -name "*.mdx" \)

# KNIFES generator (CSV ‚Üí MD)
# default CSV (SSOT export)
SCRIPTS_DIR := scripts
# Single point of input (config-driven)
CONFIG_JSON := config/knifes_config.json
# CSV default path ‚Äì read from docs/config/knifes_config.json if present; fallback to new location
CSV_DEFAULT := $(shell node -p "try{require('./$(CONFIG_JSON)').csv || ''}catch(e){''}")
ifeq ($(strip $(CSV_DEFAULT)),)
CSV_DEFAULT := config/data/KNIFES-OVERVIEW-INPUTs.csv
endif
# hlavn√Ω CSV (mo≈æno preb√≠ja≈• v prostred√≠)
CSV_OVERVIEW ?= $(CSV_DEFAULT)

# fallback na overview, ak nie je zadan√©
CSV_BACKFILL ?= $(CSV_OVERVIEW)

# Output directory for CSV snapshots/fixes
OUT_DIR    ?= config/out


# Default locale for normalize/report targets
LOCALE ?= sk

# Reference KNIFES (read-only governance / templates / rules)
KNIFES_REF_DIR := $(DOCS_DIR)/sk/ref
KNIFES_REF_MD_GLOB := $(KNIFES_REF_DIR)/**/index.md
# KNIFES main directory (default scan root)
KNIFES_DIR ?= docs/sk/knifes

# Minify toggle (default ON). Use: make build MINIFY=0  -> passes --no-minify
MINIFY ?= 1
BUILD_EXTRA :=
ifeq ($(MINIFY),0)
  BUILD_EXTRA := --no-minify
endif



.PHONY: \
  help help-auth help-actions \
  install dev clean build build-fast ci-build serve \
  check-links check-links-hard check-links-fast check-links-full fix-links \
  init-worktree check-worktree copy-build commit-deploy remove-worktree \
  push-main deploy full-deploy worktree-status \
  sandbox-from-main sandbox-from-worktree \
  stash-save stash-list stash-apply stash-drop \
  restore-folder restore-file restore-path restore-from-stash-file \
  delete-dotpages \
  actions-status actions-disable actions-enable \
  quickstart mode doctor next-steps \
  knifes-gen knifes-new dev-gen build-gen \
  gen-dry dry-verify \
  knifes-guid-backfill knifes-meta-backfill \
  knifes-verify knifes-verify-csv-docs knifes-verify-frontmatter knifes-verify-smart \
  print-vars knifes-audit-frontmatter \
  fm-fix fm-fix-dry fm-fix-file fm-fix-file-dry fm-set-slug-file knifes-fm-add-missing knifes-fm-add-missing-dry \
  release-ci release-ci-datetime \
  commit push tag push-tag release release-auto release-commit check-version knifes-finish knifes-finish-dry upgrade-docusaurus \
  knife-fm-dry knife-fm-fix knife-header-check knife-csv-fix knife-fm-report-id knife-fm-report-tree \
  knife-normalize-dry knife-normalize-apply csv-normalize-dry csv-normalize-apply \
  knifes-frontmatter-audit knifes-frontmatter-fix-dry knifes-frontmatter-fix-apply knifes-frontmatter-merge \
  knifes-frontmatter-slug-report knifes-frontmatter-slug-comment-dry knifes-frontmatter-slug-comment-apply \
  knifes-frontmatter-slug-delete-dry knifes-frontmatter-slug-delete-apply \
  knifes-id6-dry knifes-id6-apply knifes-id6-audit \
  knifes-frontmatter-audit-id knifes-frontmatter-fix-id-dry knifes-frontmatter-fix-id-apply \
  knifes-build-dry knifes-build-apply \
  knifes-gen-dry knifes-gen-apply \
  knifes-datekey-remove-dry knifes-datekey-remove-apply knifes-smartquotes-scan knifes-smartquotes-fix-dry knifes-smartquotes-fix-apply \
  knife-fm-apply k18-audit k18-fix-dry k18-fix-apply k18-verify k18-align-dry k18-align-apply \
  knifes-ref-audit knifes-ref-align-dry knifes-ref-align-apply \
  knifes-csv-scan knifes-fix-csv-dry knifes-fix-csv-apply

# -------------------------
# üìå Help
# -------------------------
help:
	@echo "# #########################################################################"
	@echo "#.                                        KNIFE Makefile v2 from 20250815 #"
	@echo "# üìÑ Makefile ‚Äì Docusaurus + Git Utils (unified)                          #"
	@echo "# Date: 20250815-0950 (patched, cleaned 20250916)                         #"
	@echo "# Description: In≈°tal√°cia, build, testy, valid√°cia a WorkTree deploy.     #"
	@echo "# CESTA 2 (Actions) dopln√≠me nesk√¥r ‚Äì tento Makefile je z√°merne jednotn√Ω. #"
	@echo "# ‚ùó Pri deployi do worktree NIKDY nema≈æ .git; oprav: make check-worktree  #"
	@echo "# #########################################################################"
	@echo "===== üß≠ UX ‚Äì pam√§≈•ov√Ω ≈•ah√°k ====="
	@echo "  quickstart             - 3 kroky na be≈æn√Ω de≈à (najƒçastej≈°√≠ flow)"
	@echo "  mode                   - Zist√≠, ƒçi ide≈° cez Worktree alebo Actions"
	@echo "  doctor                 - Z√°kladn√° diagnostika (node/git/remote/worktree)"
	@echo "  next-steps             - Odpor√∫ƒçanie ƒèal≈°ieho kroku podƒæa stavu"
	@echo "===== ‚öôÔ∏è Actions toggles ====="
	@echo "  actions-status         - Zobraz√≠, ƒçi je workflow zapnut√Ω/vypnut√Ω"
	@echo "  actions-disable        - Doƒçasne vypne Actions (premenuje deploy.yml)"
	@echo "  actions-enable         - Znovu zapne Actions"
	@echo "  help-actions           - Kr√°tky n√°vod ku GitHub Pages (Actions)"
	@echo "===== üìö Docusaurus ====="
	@echo "  install                - Nain≈°taluje docusaurus bal√≠ƒçky"
	@echo "  dev                    - Spust√≠ dev server"
	@echo "  clean                  - Vyƒçist√≠ cache a build adres√°re"
	@echo "  build                  - Build (MINIFY=$(MINIFY)); prep√≠nateƒæn√©: make build MINIFY=0"
	@echo "  build-fast             - Alias na 'make build MINIFY=0' (bez minify)"
	@echo "  ci-build               - CI-friendly build bez minifik√°cie (alias na 'make build MINIFY=0')"
	@echo "  serve                  - Lok√°lne naserv√≠ruj statick√Ω build"
	@echo "  upgrade-docusaurus    - Upgrade Docusaurus bal√≠ƒçkov na posledn√∫ verziu (@latest)"
	@echo "===== üöÄ Release (CI) =====" 
	@echo "  release-ci             - SemVer patch bump (npm version patch) + push tag ‚Üí spust√≠ CI release"
	@echo "  release-ci-datetime    - Vytvor√≠ tag vYYYYMMDD-HHMM (UTC) bez zmeny package.json a pushne ho"
	@echo "                         Pr√≠klad: v20250925-2315"
	@echo "                         Pou≈æitie: make release-ci | make release-ci-datetime"
	@echo "                         (CI) vy≈æaduje: .github/workflows/release.yml"
	@echo "                          APP_VERSION v p√§tiƒçke sa nastav√≠ v CI z tagu: $${GITHUB_REF_NAME}"
	@echo "===== üè∑Ô∏è Release (lok√°lne tagy) ====="
	@echo "  release            - vytvor√≠ annotated tag $(VERSION) a pushne ho (spust√≠ CI Release)"
	@echo "  release-auto       - automatick√Ω tag vYYYYMMDD-HHMMSSZ a pushne ho"
	@echo "  release-commit     - commit -> push vetvy -> tag -> push tag"
	@echo "  tag                - len vytvor√≠ lok√°lny tag (bez pushu)"
	@echo "  push-tag           - pushne zadan√Ω tag na origin"
	@echo "===== üîç Link Checker ====="
	@echo "  check-links            - DRY-RUN kontrola odkazov v docs/"
	@echo "  check-links-hard       - Striktn√° kontrola: spust√≠ build"
	@echo "  check-links-fast       - Striktn√° kontrola s vypnutou minifik√°ciou"
	@echo "  check-links-full       - Full kontrola (docs + config + t√©my)"
	@echo "  fix-links              - Oprava ‚Ä¶/index -> ‚Ä¶/"
	@echo "===== üåø Worktree Deploy ====="
	@echo "  init-worktree          - Alias na check-worktree (zalo≈æ√≠/oprav√≠ worktree)"
	@echo "  check-worktree         - Over√≠/Vytvor√≠ worktree (self-healing)"
	@echo "  copy-build             - Rsync build/ -> $(PAGES_DIR)/  (chr√°ni .git)"
	@echo "  commit-deploy          - Commit & push z worktree"
	@echo "  remove-worktree        - Odpoj√≠ worktree (NEma≈æ .git ruƒçne!)"
	@echo "  worktree-status        - Debug: git status + zoznam worktrees"
	@echo "  push-main              - Bezpeƒçn√Ω push mainu (zastav√≠ ak m√°≈° zmeny)"
	@echo "  deploy                 - check-worktree + build + copy-build + commit-deploy"
	@echo "  full-deploy            - check-worktree + push-main + build + copy + commit"
	@echo "===== üß© KNIFE Gener√°tor ====="
	@echo "  knifes-validate         - Validuje CSV podƒæa config/knifes_config.json"
	@echo "  knifes-prepare          - Validate + Generate (E2E, config-driven)"
	@echo "  knifes-prepare-strict   - Pr√≠sna valid√°cia + Generate (na CI)"
	@echo "  knifes-generate         - Generuje prehƒæady + nov√© KNIFE (config-driven)"
	@echo "  dev-gen                - knifes-gen + dev (vygeneruje MD a spust√≠ lok√°lny dev)"
	@echo "  build-gen              - knifes-gen + build (vygeneruje MD a sprav√≠ prod build)"
	@echo "  knifes-gen             - Generuje/aktualizuje MD zo CSV (prehƒæady + ch√Ωbaj√∫ce Kxxx skeletony)"
	@echo "  knifes-new              - id=K000062 title=\"...\" ‚Äì r√Ωchlo zalo≈æ√≠ skeleton novej KNIFE"
	@echo "  gen-dry                - ‚Äûsuch√Ω‚Äú pl√°n generovania (niƒç nezapisuje)"
	@echo "  dry-verify             - skr√°ten√° valid√°cia cez gener√°tor (bez z√°sahu)"
	@echo "  knifes-build-dry       - DRY-RUN: build (CSV‚ÜíMD) podƒæa configu, niƒç nezapisuje [NEW 2025-10-04]"
	@echo "  knifes-build-apply     - APPLY:   build (CSV‚ÜíMD) podƒæa configu, zap√≠≈°e zmeny [NEW 2025-10-04]"
	@echo "  knifes-csv-scan         - Naskenuje docs/sk/knifes ‚Üí vytvor√≠ CSV snapshot (timestamp)"
	@echo "  knifes-fix-csv-dry      - DRY: MD ‚Üí CSV (fill-only), niƒç neprep√≠≈°e (len pl√°n)"
	@echo "  knifes-fix-csv-apply    - APPLY: MD ‚Üí CSV (fill-only), zap√≠≈°e nov√Ω CSV s timestampom"
# -------------------------
# üèó KNIFES Build (explicit DRY/APPLY wrappers)
# -------------------------
.PHONY: knifes-build-dry knifes-build-apply

## knifes-build-dry: DRY-RUN build (CSV‚ÜíMD) ‚Äì no writes
knifes-build-dry:
	@CSV="$(csv)"; if [ -z "$$CSV" ]; then CSV="$(strip $(CSV_OVERVIEW))"; fi; \
	echo "üß™ DRY-RUN: KNIFES build (CSV‚ÜíMD) [$$(date -u +'%Y-%m-%d %H:%M:%S UTC')] ‚Äì CSV='$$CSV' locale=$(LOCALE)"; \
	node "$(SCRIPTS_DIR)/knifes-build.mjs" --csv "$$CSV" --root . --locale $(LOCALE) --dry-run

## knifes-build-apply: APPLY build (CSV‚ÜíMD) ‚Äì writes
knifes-build-apply:
	@CSV="$(csv)"; if [ -z "$$CSV" ]; then CSV="$(strip $(CSV_OVERVIEW))"; fi; \
	echo "üõ† APPLY: KNIFES build (CSV‚ÜíMD) [$$(date -u +'%Y-%m-%d %H:%M:%S UTC')] ‚Äì CSV='$$CSV' locale=$(LOCALE)"; \
	node "$(SCRIPTS_DIR)/knifes-build.mjs" --csv "$$CSV" --root . --locale $(LOCALE)

	@echo "  knifes-finish           - Uzavri KNIFE: FM pods√∫borov -> backfill -> canonical fix -> verify -> gen"
	@echo "  knifes_config-finish-dry       - DRY-RUN pl√°n uzavretia KNIFE (niƒç nezapisuje)"
	@echo "===== ‚úÖ Verifications & Backfill ====="
	@echo "  knifes-guid-backfill    - Dopln√≠ ch√Ωbaj√∫ce 'guid' a 'dao' do KNIFE MD (len tam, kde ch√Ωbaj√∫)"
	@echo "  knifes-meta-backfill    - Z CSV dopln√≠ 'created'; ak ch√Ωba 'modified', nastav√≠ ho na 'created'; voliteƒæne dopln√≠ category/type/priority"
	@echo "  knifes-verify           - Kombinovan√Ω check: CSV/docs + lint frontmatteru (povinn√© polia)"
	@echo "  knifes-verify-csv-docs  - CSV/docs konzistencia (duplicitn√© ID, pr√°zdne n√°zvy, kol√≠zie slugov, ch√Ωbaj√∫ce s√∫bory)"
	@echo "  knifes-verify-frontmatter - Lint povinn√Ωch pol√≠ (guid, dao, id, title, created, modified)"
	@echo "  knifes-audit-frontmatter - Audit existuj√∫cich KNIFE index.md (guid/dao/dates/slug/locale)"
	@echo "  knifes-verify-smart     - Konfigur√°ciou riaden√° verifik√°cia (scripts/knifes-verify.mjs)"
	@echo "===== üìù Frontmatter Tools ====="
	@echo "  fm-fix                 - Prep√≠≈°e frontmatter v docs/ tak, ≈æe 'slug' bude zakomentovan√Ω (# slug: \"...\")"
	@echo "  fm-fix-dry             - N√°hƒæad (DRY-RUN) zmien frontmatteru pre cel√Ω docs/ (vytlaƒç√≠ unified diff)"
	@echo "  fm-fix-file            - Prep√≠≈°e frontmatter iba jedn√©ho s√∫boru; pou≈æitie: make fm-fix-file file=PATH"
	@echo "  fm-fix-file-dry        - DRY-RUN pre jeden s√∫bor; pou≈æitie: make fm-fix-file-dry file=PATH"
	@echo "  fm-set-slug-file       - Akt√≠vny slug pre jedin√Ω s√∫bor; pou≈æitie: make fm-set-slug-file file=PATH slug=/cesta/bez-locale"
	@echo "  knifes-fm-add-missing   - Prid√° default frontmatter do MD bez FM (idempotentne)"
	@echo "  knifes-fm-add-missing-dry- DRY-RUN: uk√°≈æe, ktor√© s√∫bory by dostali frontmatter"
	@echo "===== üßº KNIFE Fix/Checks (FM & Header) ====="
	@echo "  knife-fm-dry          - DRY-RUN: nov√Ω opravn√Ω FM n√°stroj (read-only)"
	@echo "  knife-fm-fix          - APPLY:   nov√Ω opravn√Ω FM n√°stroj (prep√≠≈°e FM podƒæa pravidiel)"
	@echo "  knife-fm-apply        - Alias na knife-fm-fix (APPLY)"
	@echo "  knife-header-check    - Report:  kontrola H1 nadpisu po FM (technick√° hlaviƒçka)"
	@echo "  knife-csv-fix         - P√¥vodn√Ω CSV/folder fix (fallback, bez z√°sahu do obsahu MD)"
	@echo "  knife-fm-report-id    - REPORT: detailn√Ω v√Ωpis pl√°novan√Ωch FM zmien pre jedno ID (make knife-fm-report-id id=K000059)"
	@echo "  knife-fm-report-tree  - REPORT: detailn√Ω v√Ωpis FM zmien pre cel√∫ zlo≈æku KNIFE (make knife-fm-report-tree id=K000083)"
	@echo "===== üìê K18 Baseline (Audit ‚Üí Fix ‚Üí Verify) ====="
	@echo "  k18-audit              - Audit FM (read-only) podƒæa K18 baseline"
	@echo "  k18-fix-dry            - DRY-RUN n√°vrh opr√°v FM podƒæa K18 (bez z√°pisu)"
	@echo "  k18-fix-apply          - APPLY: oprav√≠ FM podƒæa K18 (rob√≠ si backup vo vn√∫tri skriptu)"
	@echo "  k18-verify             - Over√≠ v√Ωsledok (audit + lint povinn√Ωch pol√≠)"
	@echo "  k18-align-dry          - Sekvencia: audit ‚Üí fix-dry ‚Üí re-audit (bez z√°pisu)"
	@echo "  k18-align-apply        - Sekvencia: fix-apply ‚Üí verify"
	@echo "===== üìö KNIFES_REF (reference content) ====="
	@echo "  knifes-ref-audit        - Audit KNIFES_REF (read-only)"
	@echo "  knifes-ref-align-dry    - Audit ‚Üí (placeholder dry fix) ‚Üí Audit again"
	@echo "  knifes-ref-align-apply  - (placeholder apply fix) ‚Üí Audit"
	@echo "===== üß∞ KNIFE Normalize (slug‚Üícomment, header/nav) ====="
	@echo "  knife-normalize-dry    - DRY:  uk√°≈æe, ktor√© hlavn√© MD by normalize upravil (bez z√°pisu)"
	@echo "  knife-normalize-apply  - APPLY: spust√≠ normalize a zap√≠≈°e zmeny (slug do koment√°ra, NAV, header)"
	@echo "===== üßº CSV Normalize (aliases + dates + status) ====="
	@echo "  csv-normalize-dry      - DRY:  aliasy hlaviƒçiek (Date‚ÜíCreated‚Ä¶), d√°tumy (DD.MM.YYYY‚ÜíYYYY-MM-DD), stavy (wip‚Üíinprogress) [NEW 2025-10-03]"
	@echo "  csv-normalize-apply    - APPLY: normalizuje CSV (pred z√°pisom sprav√≠ backup) [NEW 2025-10-03]"
	@echo "===== üßæ KNIFES Frontmatter (audit/fix/merge) ====="
	@echo "  knifes-frontmatter-audit        - Audit FM podƒæa pravidiel (read-only). [NEW 2025-10-03]"
	@echo "  knifes-frontmatter-fix-dry      - DRY-RUN: n√°vrhy opr√°v FM (bez z√°pisu). [NEW 2025-10-03]"
	@echo "  knifes-frontmatter-fix-apply    - APPLY:    oprav√≠ FM (bez z√°sahu do obsahu). [NEW 2025-10-03]"
	@echo "  knifes-frontmatter-merge        - Merge FM (napr. CSV‚ÜíMD doplnenia; config-driven). [NEW 2025-10-03]"
	@echo "  knifes-frontmatter-audit-id     - Audit iba pre jedno ID (id=K000059). [NEW 2025-10-03]"
	@echo "  knifes-frontmatter-fix-id-dry   - DRY-RUN fix FM pre jedno ID (id=K000059). [NEW 2025-10-03]"
	@echo "  knifes-frontmatter-fix-id-apply - APPLY    fix FM pre jedno ID (id=K000059). [NEW 2025-10-03]"
	@echo "===== üîó Slug tools (report/comment/delete) ====="
	@echo "  knifes-frontmatter-slug-report        - Report s√∫borov s akt√≠vnym/komentovan√Ωm slugom (id=K000059 scope=index|all). [NEW 2025-10-03]"
	@echo "  knifes-frontmatter-slug-comment-dry   - DRY:  akt√≠vny slug -> koment√°r (bez z√°pisu). [NEW 2025-10-03]"
	@echo "  knifes-frontmatter-slug-comment-apply - APPLY: akt√≠vny slug -> koment√°r (zap√≠≈°e). [NEW 2025-10-03]"
	@echo "  knifes-frontmatter-slug-delete-dry    - DRY:  vyma≈æe v≈°etky slug riadky (akt√≠vne aj koment√°r). [NEW 2025-10-03]"
	@echo "  knifes-frontmatter-slug-delete-apply  - APPLY: vyma≈æe v≈°etky slug riadky (akt√≠vne aj koment√°r). [NEW 2025-10-03]"
	@echo "===== üßπ FM Sanitation (safe-only) ====="
	@echo "  knifes-datekey-remove-dry   - DRY: iba odstr√°ni kƒæ√∫ƒç 'date:' z KNIFE index.md (bez z√°pisu)"
	@echo "  knifes-datekey-remove-apply - APPLY: odstr√°ni 'date:' z KNIFE index.md (zap√≠≈°e)"
	@echo "  knifes-smartquotes-scan     - Scan: n√°jde ‚Äúsmart quotes‚Äù v docs/ (read-only)"
	@echo "  knifes-smartquotes-fix-dry  - DRY: nahrad√≠ ‚Äúsmart quotes‚Äù ‚Üí \" rovn√© (bez z√°pisu)"
	@echo "  knifes-smartquotes-fix-apply- APPLY: nahrad√≠ ‚Äúsmart quotes‚Äù ‚Üí \" rovn√© (zap√≠≈°e)"
	@echo "===== üî¢ KNIFE ID6 Migration (K### ‚Üí K######) ====="
	@echo "  knifes-id6-dry     - DRY-RUN: kontrola form√°tu ID a premenovania prieƒçinkov (bez z√°pisu). [NEW 2025-10-03]"
	@echo "  knifes-id6-apply   - APPLY:    premenuje prieƒçinky, prep√≠≈°e FM id a referencie (opatrne). [NEW 2025-10-03]"
	@echo "  knifes-id6-audit   - Audit po migr√°cii: over√≠ zhody id vs. n√°zov prieƒçinka. [NEW 2025-10-03]"
# -------------------------
# üß∞ KNIFE Normalize (main MD in each KNIFE folder)
# -------------------------
.PHONY: knife-normalize-dry knife-normalize-apply

## knife-normalize-dry: DRY-RUN normalize (no writes)
knife-normalize-dry:
	@echo "üß™ DRY-RUN: knifes-normalize (locale=$(LOCALE))"
	@node scripts/knifes-normalize.mjs --locale $(LOCALE) --dry

## knife-normalize-apply: APPLY normalize (writes)
knife-normalize-apply:
	@echo "üõ† APPLY: knifes-normalize (locale=$(LOCALE))"
	@node scripts/knifes-normalize.mjs --locale $(LOCALE) --apply


# -------------------------
# üßº CSV Normalize (aliases + dates + status)
# -------------------------
.PHONY: csv-normalize-dry csv-normalize-apply

## csv-normalize-dry: DRY-RUN CSV normalization (no writes)
csv-normalize-dry:
	@echo "üß™ DRY-RUN: CSV normalize podƒæa $(CONFIG_JSON)"
	@node scripts/knifes-csv-normalize.mjs --config $(CONFIG_JSON) --dry

## csv-normalize-apply: APPLY CSV normalization (with backup)
csv-normalize-apply:
	@echo "üõ† APPLY: CSV normalize podƒæa $(CONFIG_JSON) (backup pred z√°pisom)"
	@node scripts/knifes-csv-normalize.mjs --config $(CONFIG_JSON) --apply


# -------------------------
# üîë CSV GUID Sync (MD ‚Üí CSV)
# -------------------------
.PHONY: csv-guid-sync-dry csv-guid-sync-apply

## csv-guid-sync-dry: DRY-RUN sync GUID from MD frontmatter into CSV
csv-guid-sync-dry:
	@echo "üß™ DRY-RUN: Sync GUID z MD (frontmatter) do CSV podƒæa $(CONFIG_JSON)"
	@node scripts/knifes-csv-sync-guid.mjs --config $(CONFIG_JSON) --dry

## csv-guid-sync-apply: APPLY sync GUID from MD into CSV (with backup)
csv-guid-sync-apply:
	@echo "üõ† APPLY: Sync GUID z MD (frontmatter) do CSV (backup pred z√°pisom)"
	@node scripts/knifes-csv-sync-guid.mjs --config $(CONFIG_JSON) --apply

# Extra: GUID audit alias (read-only ‚Äì same as DRY)
.PHONY: csv-guid-sync-audit
csv-guid-sync-audit:
	@echo "üîé AUDIT: Sync GUID (MD ‚Üí CSV) ‚Äì read-only"
	@node $(SCRIPTS_DIR)/knifes-csv-sync-guid.mjs --config $(CONFIG_JSON) --csv $(CSV_OVERVIEW) --fields guid --dry

# -------------------------
# üîë CSV DAO Sync (MD ‚Üí CSV)
# -------------------------
.PHONY: csv-dao-sync-dry csv-dao-sync-apply csv-dao-sync-audit

## csv-dao-sync-dry: DRY-RUN sync DAO from MD frontmatter into CSV
csv-dao-sync-dry:
	@echo "üß™ DRY-RUN: Sync DAO z MD (frontmatter) do CSV podƒæa $(CONFIG_JSON)"
	@node $(SCRIPTS_DIR)/knifes-csv-sync-guid.mjs --config $(CONFIG_JSON) --csv $(CSV_OVERVIEW) --fields dao --dry

## csv-dao-sync-apply: APPLY sync DAO from MD into CSV (with backup)
csv-dao-sync-apply:
	@echo "üõ† APPLY: Sync DAO z MD (frontmatter) do CSV (backup pred z√°pisom)"
	@cp $(CSV_OVERVIEW) $(CSV_OVERVIEW).bak || true
	@node $(SCRIPTS_DIR)/knifes-csv-sync-guid.mjs --config $(CONFIG_JSON) --csv $(CSV_OVERVIEW) --fields dao --apply

## csv-dao-sync-audit: AUDIT (alias DRY) DAO sync
csv-dao-sync-audit:
	@echo "üîé AUDIT: Sync DAO (MD ‚Üí CSV) ‚Äì read-only"
	@node $(SCRIPTS_DIR)/knifes-csv-sync-guid.mjs --config $(CONFIG_JSON) --csv $(CSV_OVERVIEW) --fields dao --dry

# -------------------------
# üîë CSV DID Sync (MD ‚Üí CSV)
# -------------------------
.PHONY: csv-did-sync-dry csv-did-sync-apply csv-did-sync-audit

## csv-did-sync-dry: DRY-RUN sync DID from MD frontmatter into CSV
csv-did-sync-dry:
	@echo "üß™ DRY-RUN: Sync DID z MD (frontmatter) do CSV podƒæa $(CONFIG_JSON)"
	@node $(SCRIPTS_DIR)/knifes-csv-sync-guid.mjs --config $(CONFIG_JSON) --csv $(CSV_OVERVIEW) --fields did --dry

## csv-did-sync-apply: APPLY sync DID from MD into CSV (with backup)
csv-did-sync-apply:
	@echo "üõ† APPLY: Sync DID z MD (frontmatter) do CSV (backup pred z√°pisom)"
	@cp $(CSV_OVERVIEW) $(CSV_OVERVIEW).bak || true
	@node $(SCRIPTS_DIR)/knifes-csv-sync-guid.mjs --config $(CONFIG_JSON) --csv $(CSV_OVERVIEW) --fields did --apply

## csv-did-sync-audit: AUDIT (alias DRY) DID sync
csv-did-sync-audit:
	@echo "üîé AUDIT: Sync DID (MD ‚Üí CSV) ‚Äì read-only"
	@node $(SCRIPTS_DIR)/knifes-csv-sync-guid.mjs --config $(CONFIG_JSON) --csv $(CSV_OVERVIEW) --fields did --dry

help-auth:
	@echo "===== üîê Autentik√°cia pre Worktree deploy ====="
	@echo "HTTPS (odpor√∫ƒçan√© na macOS):"
	@echo "  git remote -v   # m√° by≈• https://"
	@echo "  git config --global credential.helper osxkeychain"
	@echo "  pri prvom 'git push' zadaj PAT -> ulo≈æ√≠ sa do Keychain"
	@echo "SSH (alternat√≠va):"
	@echo "  ssh-keygen -t ed25519 -C 'tvoj@email'"
	@echo "  eval \"$$(/usr/bin/ssh-agent -s)\" && ssh-add $$HOME/.ssh/id_ed25519"
	@echo "  nahraj verejn√Ω kƒæ√∫ƒç do GitHub (Settings -> SSH and GPG keys)"
	@echo "  git remote set-url origin git@github.com:ORG/REPO.git"
	@echo "  test: ssh -T git@github.com"

help-actions:
	@echo "===== ‚öôÔ∏è CI/CD (Cesta 2 ‚Äì GitHub Actions ‚Üí Pages) ====="
	@echo "1) Pridaj .github/workflows/deploy.yml (ofici√°lny Docusaurus workflow)."
	@echo "2) Settings -> Pages -> Build and deployment = GitHub Actions."
	@echo "3) V docusaurus.config nastav spr√°vny baseUrl (napr. '/knifes-overview/')."
	@echo "4) Po push do main sa build nasad√≠ automaticky."

# -------------------------
# üöÄ Docusaurus Commands
# -------------------------

install:
	$(NPM) install

dev:
	BUILD_DATE="September 2025" NODE_OPTIONS=--max-old-space-size=16384 $(NPM) start

clean:
	$(NPM) run clear || true
	rm -rf $(BUILD_DIR) .docusaurus

build: clean
	BUILD_DATE="$(BUILD_DATE)" NODE_OPTIONS=--max-old-space-size=16384 $(NPM) run build -- $(BUILD_EXTRA)

build-fast:
	$(MAKE) build MINIFY=0

ci-build:
	$(MAKE) build MINIFY=0

serve:
	$(NPM) run serve

upgrade-docusaurus: ## Upgrade Docusaurus packages to latest version
	npm i @docusaurus/core@latest \
	      @docusaurus/plugin-google-gtag@latest \
	      @docusaurus/preset-classic@latest \
	      @docusaurus/module-type-aliases@latest \
	      @docusaurus/plugin-client-redirects@latest \
	      @docusaurus/tsconfig@latest \
	      @docusaurus/types@latest

# -------------------------
# üîç Link Checker
# -------------------------
check-links:
	@echo ">>> DRY-RUN: hƒæad√°m odkazy s '/index' a ch√Ωbaj√∫ce lok√°lne s√∫bory"
	@grep -RInE '\]\(((\.\./|\./)+)[^)#]+/index(\.md)?\)' $(DOCS_DIR) --include "*.md" --include "*.mdx" || echo "  ‚úì niƒç nena≈°iel"
	@echo
	@grep -Roh '\]\(([^)]+)\)' $(DOCS_DIR) --include "*.md" --include "*.mdx" \
	| sed 's/.*](\(.*\))/\1/' \
	| grep -vE '^(http|https|#|mailto:)' \
	| sort -u \
	| while read -r link; do \
		path="$(DOCS_DIR)/$${link#./}"; \
		if [[ ! -e "$$path" && ! -e "$${path%/}/index.md" ]]; then \
			echo "  ‚úó $$link"; \
		fi; \
	done || true
	@echo "DRY-RUN done."

check-links-hard:
	@echo ">>> STRICT: validujem odkazy‚Ä¶"
	$(NPM) run build -- $(BUILD_EXTRA) || { echo "‚ùå Build failed"; exit 1; }

check-links-fast:
	@echo ">>> STRICT (no-minify): validujem odkazy‚Ä¶"
	$(MAKE) check-links-hard MINIFY=0

check-links-full:
	@echo ">>> FULL CHECK: kontrolujem odkazy v docs + configu + t√©mach"
	@$(MAKE) check-links
	@grep -RIn "to: '/docs" docusaurus.config.ts || true
	@node scripts/check_config_paths.js || true

fix-links:
	@echo ">>> Opravujem odkazy ‚Ä¶/index -> ‚Ä¶/"
	@$(FIND_MD) -print0 | xargs -0 $(SED_INPLACE) \
	  -e 's#\]\(\.\.\/index\)#](../)#g' \
	  -e 's#\]\(\.\.\/\.\.\/index\)#](./)#g'

# -------------------------
# üåø Worktree Deploy ‚Äì Self-healing + ochrany
# -------------------------

# Alias (nech help sed√≠)
init-worktree: check-worktree

## check-worktree: over√≠ alebo vytvor√≠ worktree pre $(DEPLOY_BRANCH); oprav√≠ ak je rozbit√°
check-worktree:
	@if [ -d "$(WORKTREE_DIR)" ]; then \
	  if git -C "$(WORKTREE_DIR)" rev-parse --is-inside-work-tree >/dev/null 2>&1; then \
	    echo "‚úÖ Worktree OK: $(WORKTREE_DIR) ‚Üí $(DEPLOY_BRANCH)"; \
	  else \
	    echo "‚ö†Ô∏è  $(WORKTREE_DIR) existuje, ale nevyzer√° ako git worktree. Resetujem‚Ä¶"; \
	    rm -rf "$(WORKTREE_DIR)"; \
	    git worktree prune; \
	    git branch -D $(DEPLOY_BRANCH) 2>/dev/null || true; \
	  fi; \
	fi; \
	if ! git worktree list | grep -q "$(WORKTREE_DIR)"; then \
	  echo "‚ÑπÔ∏è  Worktree pre $(DEPLOY_BRANCH) neexistuje. Vytv√°ram‚Ä¶"; \
	  git fetch origin || true; \
	  if git ls-remote --exit-code --heads origin $(DEPLOY_BRANCH) >/dev/null 2>&1; then \
	    git worktree add -B $(DEPLOY_BRANCH) "$(WORKTREE_DIR)" origin/$(DEPLOY_BRANCH); \
	  else \
	    echo "‚ÑπÔ∏è  Vetva $(DEPLOY_BRANCH) na remote neexistuje, zaklad√°m lok√°lne‚Ä¶"; \
	    git branch -f $(DEPLOY_BRANCH) 2>/dev/null || true; \
	    git worktree add "$(WORKTREE_DIR)" $(DEPLOY_BRANCH); \
	    cd "$(WORKTREE_DIR)" && git commit --allow-empty -m "init $(DEPLOY_BRANCH)" && git push -u origin $(DEPLOY_BRANCH); \
	  fi; \
	fi

# Bezpeƒçn√© kop√≠rovanie buildu ‚Äì v≈ædy do /docs a len ak je to naozaj git repo
copy-build:
	@if ! git -C "$(WORKTREE_DIR)" rev-parse --is-inside-work-tree >/dev/null 2>&1; then \
	  echo "‚ùå $(WORKTREE_DIR) nie je git worktree. Spus≈•: make check-worktree"; \
	  exit 1; \
	fi
	mkdir -p "$(PAGES_DIR)"
	rsync -av --delete \
	  --filter='P .git' \
	  --filter='P .gitignore' \
	  "$(BUILD_DIR)/" "$(PAGES_DIR)/"

commit-deploy:
	@if ! git -C "$(WORKTREE_DIR)" rev-parse --is-inside-work-tree >/dev/null 2>&1; then \
	  echo "‚ùå $(WORKTREE_DIR) nie je git worktree. Spus≈•: make check-worktree"; \
	  exit 1; \
	fi
	cd $(WORKTREE_DIR) && git add -A
	cd $(WORKTREE_DIR) && git commit -m "Deploy $$(
	  date -u +'%Y-%m-%d %H:%M:%S UTC'
	)" || echo "‚ö†Ô∏è ≈Ωiadne zmeny na commit."
	cd $(WORKTREE_DIR) && git push origin $(DEPLOY_BRANCH)

# R√Ωchly lok√°lny deploy
deploy: check-worktree build copy-build commit-deploy

# Pln√Ω scen√°r: kontrola worktree + push main + build + deploy
full-deploy: check-worktree push-main build copy-build commit-deploy
	@echo "üéâ Full deploy √∫spe≈°n√Ω ‚Üí $(DEPLOY_BRANCH)"

remove-worktree:
	# Bezpeƒçn√© odpojenie cez git (NEma≈æ .git ruƒçne!)
	git worktree remove "$(WORKTREE_DIR)" 2>/dev/null || true
	git worktree prune || true

worktree-status:
	@git worktree list
	@echo "----"
	@git -C "$(WORKTREE_DIR)" status -sb || true

## push-main: Bezpeƒçn√Ω push mainu
push-main:
	@if [ -n "$$(git status --porcelain)" ]; then \
		echo "‚ùå M√°≈° necommitnut√© zmeny na main! Najprv commitni/stashni."; \
		exit 1; \
	fi
	git push origin main
	@echo "‚úÖ main pushnut√Ω."

# -------------------------
# üß™ Sandbox Commands
# -------------------------
sandbox-from-main:
	@if [ -z "$$name" ]; then echo "Pou≈æi: make sandbox-from-main name=<branch>"; exit 1; fi
	git checkout -b $$name main

sandbox-from-worktree:
	@if [ -z "$$name" ] || [ -z "$$base" ]; then echo "Pou≈æi: make sandbox-from-worktree name=<branch> base=<branch>"; exit 1; fi
	git checkout -b $$name $$base

# -------------------------
# üì¶ Stash Commands
# -------------------------
stash-save:
	@if [ -z "$$m" ]; then echo "Pou≈æi: make stash-save m='spr√°va'"; exit 1; fi
	git stash push -m "$$m"

stash-list:
	git stash list

stash-apply:
	@if [ -z "$$id" ]; then echo "Pou≈æi: make stash-apply id=<n>"; exit 1; fi
	git stash apply stash@{$$id}

stash-drop:
	@if [ -z "$$id" ]; then echo "Pou≈æi: make stash-drop id=<n>"; exit 1; fi
	git stash drop stash@{$$id}

# -------------------------
# üéØ Restore from History
# -------------------------
# ‚ö†Ô∏è Ka≈æd√Ω riadok pod targetom MUS√ç zaƒç√≠na≈• TABom (nie medzerami)!
restore-folder:
	@if [ -z "$$commit" ] || [ -z "$$path" ]; then \
		echo "‚ùå Pou≈æi: make restore-folder commit=<hash> path=<folder>"; \
		exit 1; \
	fi
	@git checkout $$commit -- $$path
	@echo "‚úÖ Obnoven√©: $(path) z commitu $(commit)"
	@git status --short
	@echo "--- Zmenen√© s√∫bory ---"
	@git diff --stat

restore-file:
	@if [ -z "$$commit" ] || [ -z "$$path" ]; then echo "Pou≈æi: make restore-file commit=<hash> path=<file>"; exit 1; fi
	git checkout $$commit -- $$path
	@echo "‚úÖ Obnoven√©: $(path) z commitu $(commit)"
	@git status --short

restore-path:
	@echo "‚ö†Ô∏è  Pozor: recepty v Makefile M√öSIA zaƒç√≠na≈• TABom!"
	@if [ -z "$$commit" ] || [ -z "$$path" ]; then \
		echo "Pou≈æi: make restore-path commit=<hash> path=<file-or-dir>"; exit 1; \
	fi
	@echo "üîé Pred zmenou (diff vs HEAD) pre '$$path':"
	@git diff --name-status -- $$path || true
	@echo "‚Ü©Ô∏è  Obnovujem '$$path' z commitu $$commit‚Ä¶"
	@git checkout $$commit -- $$path
	@echo "‚úÖ Hotovo. Zmenen√© s√∫bory:"
	@git status --short -- $$path
	@echo "üîé Po obnove (diff vs HEAD) pre '$$path':"
	@git diff --name-status -- $$path || true
	@echo "üí° Ak je to ono: git add $$path && git commit -m \"restore: $$path from $$commit\""
	@echo "‚úÖ Obnoven√©: $(path) z commitu $(commit)"

restore-from-stash-file:
	@if [ -z "$(stash)" ] || [ -z "$(file)" ]; then \
		echo "Pou≈æi: make restore-from-stash-file stash=stash@{N} file=<path>"; \
		exit 1; \
	fi
	@git restore --source=$(stash) -- $(file)
	@echo "‚úÖ S√∫bor '$(file)' obnoven√Ω zo stasha '$(stash)'"
	@git status --short

# -------------------------
# üßπ Delete legacy MkDocs .pages
# -------------------------
delete-dotpages:
	@echo ">>> Odstra≈àujem v≈°etky '.pages' s√∫bory..."
	@find . -type f -name ".pages" -exec rm -f {} +
	@echo "‚úÖ Hotovo. S√∫bory '.pages' boli zmazan√©."
	@echo "üí° Commitni: git add -A && git commit -m 'Remove .pages files'"

# -------------------------
# ‚öôÔ∏è GitHub Actions ‚Äì enable/disable by renaming workflow file
# -------------------------
WF_DIR := .github/workflows
WF_FILE := $(WF_DIR)/deploy.yml
WF_DISABLED := $(WF_FILE).disabled

actions-status:
	@if [ -f "$(WF_FILE)" ]; then \
	  echo "Actions workflow: ENABLED ($(WF_FILE))"; \
	elif [ -f "$(WF_DISABLED)" ]; then \
	  echo "Actions workflow: DISABLED ($(WF_DISABLED))"; \
	else \
	  echo "Actions workflow: NOT FOUND"; \
	fi

actions-disable:
	@mkdir -p $(WF_DIR)
	@if [ -f "$(WF_FILE)" ]; then \
	  mv "$(WF_FILE)" "$(WF_DISABLED)"; \
	  git add -A && git commit -m "ci: disable Actions deploy [noactions]" || true; \
	  echo "‚úÖ Actions deaktivovan√© (workflow s√∫bor premenovan√Ω)."; \
	else \
	  echo "‚ÑπÔ∏è Actions u≈æ vyzer√° by≈• vypnut√© (nena≈°iel som $(WF_FILE))."; \
	fi

actions-enable:
	@if [ -f "$(WF_DISABLED)" ]; then \
	  mv "$(WF_DISABLED)" "$(WF_FILE)"; \
	  git add -A && git commit -m "ci: enable Actions deploy"; \
	  echo "‚úÖ Actions aktivovan√© (workflow s√∫bor obnoven√Ω)."; \
	else \
	  echo "‚ÑπÔ∏è Actions u≈æ vyzer√° by≈• zapnut√© (nena≈°iel som $(WF_DISABLED))."; \
	fi

# -------------------------
# üß≠ UX helpers
# -------------------------

quickstart:
	@echo "üëã Ahoj! Najƒçastej≈°√≠ denn√Ω flow:"
	@echo "  1) Uprav docs:          (napr. docs/sk/...)"
	@echo "  2) Lok√°lny test:        make dev   # alebo: make build && make serve"
	@echo "  3) Deployment:"
	@echo "     - Worktree:          make full-deploy"
	@echo "     - Actions (CI/CD):   git add -A && git commit -m 'msg' && git push"
	@echo ""
	@echo "‚ÑπÔ∏è  Tipy:"
	@echo "  ‚Ä¢ PUSH bez CI:          commit msg obsahuje [noactions]"
	@echo "  ‚Ä¢ Prep√≠na≈• Actions:     make actions-enable | make actions-disable"
	@echo "  ‚Ä¢ Zisti re≈æim:          make mode"

mode:
	@echo "üîé Re≈æim nasadenia:"
	@if [ -d "$(WORKTREE_DIR)/.git" ]; then \
	  echo "  ‚Ä¢ Worktree:   ENABLED  ‚Üí $(WORKTREE_DIR)"; \
	else \
	  echo "  ‚Ä¢ Worktree:   disabled (spus≈•: make check-worktree)"; \
	fi
	@if [ -f ".github/workflows/deploy.yml" ]; then \
	  echo "  ‚Ä¢ Actions:    ENABLED  (CI/CD be≈æ√≠ na push)"; \
	elif [ -f ".github/workflows/deploy.yml.disabled" ]; then \
	  echo "  ‚Ä¢ Actions:    disabled (zapni: make actions-enable)"; \
	else \
	  echo "  ‚Ä¢ Actions:    nena≈°iel som workflow s√∫bor (.github/workflows/deploy.yml)"; \
	fi
	@echo ""
	@echo "üß† Odpor√∫ƒçanie:"
	@if [ -d "$(WORKTREE_DIR)/.git" ]; then \
	  echo "  ‚Ä¢ Pre okam≈æit√Ω manual deploy pou≈æi: make full-deploy"; \
	else \
	  echo "  ‚Ä¢ Najprv vytvor worktree: make check-worktree (ak chce≈° Cestu 1)"; \
	fi
	@echo "  ‚Ä¢ Alebo pou≈æi CI/CD: commit + push (Cesta 2)."

doctor:
	@echo "ü©∫ Diagnostika‚Ä¶"
	@echo "  ‚Ä¢ Node: $$(node -v 2>/dev/null || echo 'n/a')"
	@echo "  ‚Ä¢ NPM:  $$(npm -v 2>/dev/null || echo 'n/a')"
	@echo "  ‚Ä¢ Git:  $$(git --version 2>/dev/null || echo 'n/a')"
	@echo "  ‚Ä¢ Remote origin: $$(git remote -v | awk 'NR==1{print $$2}')"
	@echo "  ‚Ä¢ Aktu√°lna vetva: $$(git rev-parse --abbrev-ref HEAD)"
	@if [ -d "$(WORKTREE_DIR)/.git" ]; then \
	  echo "  ‚Ä¢ Worktree: OK  ($(WORKTREE_DIR))"; \
	else \
	  echo "  ‚Ä¢ Worktree: MISSING (spus≈•: make check-worktree)"; \
	fi
	@if [ -f ".github/workflows/deploy.yml" ]; then \
	  echo "  ‚Ä¢ Actions:  ENABLED"; \
	elif [ -f ".github/workflows/deploy.yml.disabled" ]; then \
	  echo "  ‚Ä¢ Actions:  disabled (make actions-enable)"; \
	else \
	  echo "  ‚Ä¢ Actions:  workflow ch√Ωba (.github/workflows/deploy.yml)"; \
	fi
	@echo "‚úÖ Done."

next-steps:
	@echo "ü§ñ Navrhovan√Ω ƒèal≈°√≠ krok:"
	@if [ -d "$(WORKTREE_DIR)/.git" ]; then \
	  echo "  ‚Üí make full-deploy   # skompiluje + skop√≠ruje do worktree + pushne"; \
	else \
	  if [ -f ".github/workflows/deploy.yml" ]; then \
	    echo "  ‚Üí git add -A && git commit -m 'update' && git push   # spust√≠ CI/CD"; \
	  else \
	    echo "  ‚Üí Spusti najprv: make check-worktree  (alebo zapni Actions)"; \
	  fi; \
	fi
	@echo "üí° Debug: make mode | make doctor"

# -------------------------
# üß© KNIFES generator (CSV ‚Üí MD)
# -------------------------

## knifes-gen: CSV -> MD (prehƒæady + ch√Ωbaj√∫ce Kxxx s√∫bory)
knifes-gen:
	@if [ ! -f "$(SCRIPTS_DIR)/knifes-build.mjs" ]; then \
		echo "‚ùå Ch√Ωba $(SCRIPTS_DIR)/knifes-build.mjs ‚Äì skop√≠ruj scripts/ do kore≈àa repozit√°ra."; exit 1; \
	fi
	@if [ ! -f "$(strip $(CSV_OVERVIEW))" ]; then \
		echo "‚ùå Ch√Ωba CSV '$(strip $(CSV_OVERVIEW))'. Ulo≈æ export z Calc/Excel alebo pou≈æi: make knifes-gen csv=<path>"; \
		echo "   Pr√≠klad: make knifes-gen csv=$(CSV_DEFAULT)"; exit 1; \
	fi
	@CSV="$(csv)"; if [ -z "$$CSV" ]; then CSV="$(strip $(CSV_OVERVIEW))"; fi; \
	node "$(SCRIPTS_DIR)/knifes-build.mjs" --csv "$$CSV" --root .

## knifes-new: zalo≈æ√≠ skeleton KNIFE
## Pou≈æitie: make knifes-new id=K000062 title="My Topic"
knifes-new:
	@if [ -z "$(id)" ]; then echo "Pou≈æi: make knifes-new id=K000062 title='N√°zov'"; exit 1; fi
	@if [ ! -f "$(SCRIPTS_DIR)/new_knife.mjs" ]; then \
		echo "‚ùå Ch√Ωba $(SCRIPTS_DIR)/new_knife.mjs ‚Äì skop√≠ruj scripts/ do kore≈àa repozit√°ra."; exit 1; \
	fi
	@FOLDER="docs/sk/knifes/$$(echo $(id) | tr 'A-Z' 'a-z')-*"; \
	if compgen -G "$$FOLDER" > /dev/null; then \
		echo "‚ùå KNIFE prieƒçinok pre $(id) u≈æ existuje ($$FOLDER). Ukonƒçujem."; exit 1; \
	fi
	@TITLE="$(title)"; if [ -z "$$TITLE" ]; then TITLE="New Topic"; fi; \
	node "$(SCRIPTS_DIR)/new_knife.mjs" "$(id)" "$$TITLE"

## Kombinovan√© pr√≠kazy
dev-gen:
	node scripts/knifes-build.mjs --csv $(CSV_DEFAULT) --root . --locale sk

build-gen: knifes-gen build

## Len such√Ω pl√°n generovania (niƒç sa nezapisuje)
gen-dry:
	@CSV="$(csv)"; if [ -z "$$CSV" ]; then CSV="$(strip $(CSV_OVERVIEW))"; fi; \
	node "$(SCRIPTS_DIR)/knifes-build.mjs" --csv "$$CSV" --root . --dry-run


## Dry-verify priamo cez gener√°tor
dry-verify:
	@CSV="$(csv)"; if [ -z "$$CSV" ]; then CSV="$(strip $(CSV_OVERVIEW))"; fi; \
	node "$(SCRIPTS_DIR)/knifes-build.mjs" --csv "$$CSV" --root . --dry-verify

# -------------------------
# üßµ KNIFE Finish (one-button flow)
# -------------------------
.PHONY: knifes-finish knifes-finish-dry

## knifes-finish-dry: such√Ω n√°hƒæad krokov (bez z√°pisu)
knifes-finish-dry:
	@echo "‚ë† FM pods√∫bory ‚Äì DRY"
	@$(MAKE) knifes-fm-add-missing-dry
	@echo "‚ë° Verify (CSV/docs + FM)"
	@$(MAKE) knifes-verify
	@echo "‚ë¢ Gen-dry (CSV ‚Üí pl√°n)"
	@$(MAKE) gen-dry

## knifes-finish: FM pods√∫bory -> backfill -> canonical fix -> verify -> gen
knifes-finish:
	@echo "‚ë† FM pods√∫bory ‚Äì dopƒ∫≈àam‚Ä¶"
	@$(MAKE) knifes-fm-add-missing
	@echo "‚ë° Backfill GUID/DAO‚Ä¶"
	@$(MAKE) knifes-guid-backfill
	@echo "‚ë¢ Backfill meta (created/modified/category/type/priority)‚Ä¶"
	@$(MAKE) knifes-meta-backfill
	@echo "‚ë£ Canonical frontmatter (fm-fix)‚Ä¶"
	@$(MAKE) fm-fix
	@echo "‚ë§ Verify (CSV/docs + FM)‚Ä¶"
	@$(MAKE) knifes-verify
	@echo "‚ë• Generate overviews (CSV ‚Üí MD)‚Ä¶"
	@$(MAKE) knifes-gen
	@echo "‚úÖ KNIFE finish hotov√Ω. Pokraƒçuj: 'make dev' alebo 'make build'"

# -------------------------
# ‚úÖ Backfill & Verify
# -------------------------

# 1) Dopln√≠ guid + dao, nech√Ωbaj√∫ce iba
knifes-guid-backfill:
	python3 tools/guid_backfill.py docs

# 2) Backfill z CSV (created, category, type, priority, atƒè.)
#    - nastav√≠ modified==created, ak modified ch√Ωba
knifes-meta-backfill:
	@echo "‚ÑπÔ∏è  Pou≈æ√≠vam CSV: $(strip $(CSV_BACKFILL))"
	@test -f "$(strip $(CSV_BACKFILL))" || (echo "‚ùå Ch√Ωba CSV '$(strip $(CSV_BACKFILL))'. Zadaj: make knifes-meta-backfill CSV_BACKFILL=path/to.csv"; exit 1)
	@python3 tools/knife_backfill_from_csv.py "$(strip $(CSV_BACKFILL))" docs

# 3a) CSV/docs konzistencia (duplicitn√© ID, pr√°zdne n√°zvy, kol√≠zie slugov)
## knifes-verify-csv-docs: skontroluje CSV + docs (duplicitn√© ID, pr√°zdne Short Title, kol√≠zie slugov)
knifes-verify-csv-docs:
	@echo "üîé Kontrolujem KNIFES CSV a docs..."
	@if [ ! -f "$(strip $(CSV_OVERVIEW))" ] && [ -z "$(strip $(CSV_BACKFILL))" ]; then \
		echo "‚ùå Ch√Ωba CSV '$(strip $(CSV_OVERVIEW))' (alebo zadaj CSV_BACKFILL=...)"; exit 1; \
	fi
	@CSV="$(strip $(CSV_BACKFILL))"; if [ -z "$$CSV" ]; then CSV="$(strip $(CSV_OVERVIEW))"; fi; \
	echo "‚Üí Duplicitn√© ID v CSV:"; \
	cut -d',' -f1 "$$CSV" | grep -E '^K[0-9]{3}' | sort | uniq -d || echo "  ‚úì niƒç nena≈°iel"; \
	echo "‚Üí Pr√°zdne n√°zvy v CSV:"; \
	awk -F',' 'NR>1 && $$3=="" {print $$1}' "$$CSV" || echo "  ‚úì niƒç nena≈°iel"; \
	echo "‚Üí Kol√≠zie slugov v docs/sk/knifes:"; \
	find docs/sk/knifes -type f -name "*.md" -exec grep -H "^slug:" {} \; | cut -d':' -f2- | sort | uniq -d || echo "  ‚úì niƒç nena≈°iel"; \
	echo "‚úÖ knifes-verify-csv-docs hotovo."

# 3b) Lint povinn√Ωch pol√≠ vo frontmatteri

## knifes-verify-frontmatter: lint povinn√Ωch pol√≠ len pre KNIFE index.md (podƒæa folderov)
knifes-verify-frontmatter:
	@echo "üîé Kontrolujem KNIFE frontmatter (iba index.md)‚Ä¶"
	@find docs/sk/knifes -name index.md -print0 \
	| xargs -0 -n1 -I {} python3 tools/frontmatter_lint.py --file "{}" \
	  --required guid dao id title created modified \
	  --id-pattern '^K[0-9]{6}$'
	@if [ -d "docs/en/knifes" ]; then \
	  find docs/en/knifes -name index.md -print0 \
	  | xargs -0 -n1 -I {} python3 tools/frontmatter_lint.py --file "{}" \
	    --required guid dao id title created modified \
	    --id-pattern '^K[0-9]{6}$'; \
	fi
# 3) Kombinovan√Ω alias
## knifes-verify-smart: konfiguraƒçne riaden√° verifik√°cia CSV/docs
knifes-verify-smart:
	@CSV_ARG="$(strip $(CSV_OVERVIEW))"; \
	LOCALE_ARG="sk"; \
	SECTION_ARG="knifes"; \
	DOCS_DIR_ARG="$(strip $(DOCS_DIR))"; \
	if [ -f "$(CONFIG_JSON)" ]; then \
	  CSV_FROM_CFG=$$(node -p "try{require('./$(CONFIG_JSON)').csv || ''}catch(e){''}"); \
	  if [ -n "$$CSV_FROM_CFG" ]; then CSV_ARG="$$CSV_FROM_CFG"; fi; \
	  LOCALE_FROM_CFG=$$(node -p "try{require('./$(CONFIG_JSON)').locale || ''}catch(e){''}"); \
	  if [ -n "$$LOCALE_FROM_CFG" ]; then LOCALE_ARG="$$LOCALE_FROM_CFG"; fi; \
	  SECTION_FROM_CFG=$$(node -p "try{require('./$(CONFIG_JSON)').section || ''}catch(e){''}"); \
	  if [ -n "$$SECTION_FROM_CFG" ]; then SECTION_ARG="$$SECTION_FROM_CFG"; fi; \
	  DOCS_FROM_CFG=$$(node -p "try{require('./$(CONFIG_JSON)').docsDir || ''}catch(e){''}"); \
	  if [ -n "$$DOCS_FROM_CFG" ]; then DOCS_DIR_ARG="$$DOCS_FROM_CFG"; fi; \
	fi; \
	echo "CSV=$$CSV_ARG | locale=$$LOCALE_ARG | section=$$SECTION_ARG | docsDir=$$DOCS_DIR_ARG"; \
	node scripts/knifes-verify.mjs --csv "$$CSV_ARG" --root . --locale "$$LOCALE_ARG" --section "$$SECTION_ARG" --docs-dir "$$DOCS_DIR_ARG"

## knifes-verify: spust√≠ oba checky (CSV/docs + frontmatter + smart)
knifes-verify: knifes-verify-csv-docs knifes-verify-frontmatter knifes-verify-smart
	@echo "‚úÖ All KNIFE verifications passed."

# Debug: vyp√≠≈° kƒæ√∫ƒçov√© premenn√© (na odhalenie whitespace/chybn√Ωch ciest)
.PHONY: print-vars
print-vars:
	@echo "[CSV_DEFAULT]  = '$(strip $(CSV_DEFAULT))'"
	@echo "[CSV_OVERVIEW] = '$(strip $(CSV_OVERVIEW))'"
	@echo "[CSV_BACKFILL] = '$(strip $(CSV_BACKFILL))'"
	@echo "[DOCS_DIR]     = '$(strip $(DOCS_DIR))'"
	@echo "[SCRIPTS_DIR]  = '$(strip $(SCRIPTS_DIR))'"
	@echo "[CONFIG_JSON] = '$(strip $(CONFIG_JSON))'"
	@node -e "try{const c=require('./$(CONFIG_JSON)');console.log('[CONFIG.csv]  = \\''+(c.csv||'')+'\\'')}catch(e){console.log('[CONFIG.csv]  = <not found>')}"

knifes-validate-csv:
	node dev/csv/knifes-csv-verify.mjs $(CSV_DEFAULT) --schema dev/csv/schema/header.aliases.json || \
	( echo "‚ùå CSV validation failed ‚Äì fix ODS or update dev/csv/schema/header.aliases.json"; exit 1 )

knifes-build-safe:
	@$(MAKE) knifes-validate-csv
	node scripts/knifes-build.mjs --csv $(CSV_DEFAULT) --root . --locale sk

knifes-audit-frontmatter:
	node scripts/knifes-frontmatter-audit.mjs docs/sk/knifes	

# -------------------------
# üß© KNIFE FM Fix ‚Äì re√°lny opravn√Ω n√°stroj (replaces audit)
# -------------------------
.PHONY: knife-fm-dry knife-fm-fix knife-header-check knife-csv-fix knife-fm-report-id knife-fm-report-tree

## knife-fm-dry: DRY-RUN normaliz√°cie Front Matter (niƒç nezapisuje)
knife-fm-dry:
	@echo "üß™ DRY-RUN: normalizujem Front Matter v $(DOCS_DIR)/ (len report, bez z√°pisu)‚Ä¶"
	@node scripts/knifes-frontmatter-fix.mjs --config $(CONFIG_JSON) --dry

## knife-fm-fix: Aplikuj normaliz√°ciu Front Matter (zap√≠≈°e zmeny)
knife-fm-fix:
	@echo "üõ†  APPLY: normalizujem Front Matter v $(DOCS_DIR)/ (zap√≠≈°em zmeny)‚Ä¶"
	@node scripts/knifes-frontmatter-fix.mjs --config $(CONFIG_JSON) --apply

## knife-fm-apply: Alias na APPLY normaliz√°ciu Front Matter
knife-fm-apply:
	@echo "üõ†  APPLY (alias): normalizujem Front Matter v $(DOCS_DIR)/ ‚Ä¶"
	@node scripts/knifes-frontmatter-fix.mjs --config $(CONFIG_JSON) --apply

## knife-header-check: Skontroluj technick√∫ hlaviƒçku obsahu (H1 po FM)
knife-header-check:
	@echo "üîé Auditujem technick√∫ hlaviƒçku (H1 po FM) ‚Äì read-only‚Ä¶"
	@node scripts/knifes-frontmatter-audit.mjs "$(DOCS_DIR)/sk/knifes"

## knife-csv-fix: Spusti p√¥vodn√Ω CSV/folder fix (bez √∫prav obsahu .md)
knife-csv-fix:
	@echo "üß© CSV/folder fix ‚Üí pou≈æijem knifes-frontmatter-fix.mjs (legacy alias)‚Ä¶"
	@node scripts/knifes-frontmatter-fix.mjs --config $(CONFIG_JSON) --apply

## knife-fm-report-id: Report pre konkr√©tne ID (detailn√© FM zmeny), pou≈æitie: make knife-fm-report-id id=K000059
knife-fm-report-id:
	@if [ -z "$(id)" ]; then \
		echo "‚ùå Ch√Ωba parameter: id=KXXX"; \
		echo "   Pou≈æitie: make knife-fm-report-id id=K000059"; \
		exit 2; \
	fi
	@echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
	@echo "üìã KNIFE FM REPORT ‚Äì detailn√© pl√°novan√© zmeny"
	@echo "   ID: $(id)"
	@echo "   Config: $(CONFIG_JSON)"
	@echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
	@echo "‚ÑπÔ∏è  Tento report NIƒå NEZAPISUJE. Sl√∫≈æi na review pred apply."
	@echo "   Tip: Ak chce≈° vidie≈• cel√Ω rozsah zmien v repo, pou≈æi: make knife-fm-dry"
	@echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
	@node scripts/knifes-frontmatter-fix.mjs --config $(CONFIG_JSON) --dry --id $(id)
	@ec=$$?; \
	echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"; \
	if [ $$ec -eq 0 ]; then \
	  echo "‚úÖ Report hotov√Ω. Ak je v≈°etko OK pre cel√© repo ‚Üí make knife-fm-fix"; \
	else \
	  echo "‚ö†Ô∏è  Skript vr√°til exit-code $$ec (pozri log vy≈°≈°ie)."; \
	fi

## knife-fm-report-tree: Report pre cel√∫ zlo≈æku KNIFE (ID-tree), pou≈æitie: make knife-fm-report-tree id=K000083
knife-fm-report-tree:
	@if [ -z "$(id)" ]; then \
		echo "‚ùå Ch√Ωba parameter: id=KXXX"; \
		echo "   Pou≈æitie: make knife-fm-report-tree id=K000083"; \
		exit 2; \
	fi
	@echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
	@echo "üìã KNIFE FM TREE REPORT ‚Äì detailn√© pl√°novan√© zmeny pre cel√∫ zlo≈æku ID=$(id)"
	@echo "   Config: $(CONFIG_JSON)"
	@echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
	@echo "‚ÑπÔ∏è  Tento report NIƒå NEZAPISUJE. Sl√∫≈æi na review pred apply."
	@node scripts/knifes-frontmatter-audit.mjs "$(DOCS_DIR)/sk/knifes"
	@ec=$$?; \
	echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"; \
	if [ $$ec -eq 0 ]; then \
	  echo "‚úÖ Tree report hotov√Ω. Ak je v≈°etko OK ‚Üí make knife-fm-fix"; \
	else \
	  echo "‚ö†Ô∏è  Skript vr√°til exit-code $$ec (pozri log vy≈°≈°ie)."; \
	fi

# -------------------------
# üìù Frontmatter Tools
# -------------------------

## fm-fix: Prejde cel√Ω docs/ a zakomentuje 'slug' (bez z√°pisu konkr√©tnej hodnoty)
fm-fix:
	@python3 tools/fix_frontmatter.py --root $(DOCS_DIR)

## fm-fix-dry: DRY-RUN n√°hƒæad zmien (vyp√≠≈°e unified diff), niƒç nezapisuje
fm-fix-dry:
	@python3 tools/fix_frontmatter.py --root $(DOCS_DIR) --dry-run

## fm-fix-file: Prep√≠≈°e frontmatter iba jedn√©ho s√∫boru (vy≈æaduje file=PATH)
fm-fix-file:
	@if [ -z "$$file" ]; then echo "Pou≈æi: make fm-fix-file file=PATH"; exit 1; fi
	@python3 tools/fix_frontmatter.py --file "$$file"

## fm-fix-file-dry: DRY-RUN iba pre jeden s√∫bor (vy≈æaduje file=PATH)
fm-fix-file-dry:
	@if [ -z "$$file" ]; then echo "Pou≈æi: make fm-fix-file-dry file=PATH"; exit 1; fi
	@python3 tools/fix_frontmatter.py --file "$$file" --dry-run


## fm-set-slug-file: Zap√≠≈°e akt√≠vny slug pre jedin√Ω s√∫bor (vy≈æaduje file=PATH a slug=/cesta)
fm-set-slug-file:
	@if [ -z "$$file" ] || [ -z "$$slug" ]; then echo "Pou≈æi: make fm-set-slug-file file=PATH slug=/cesta/bez-locale"; exit 1; fi
	@python3 tools/fix_frontmatter.py --file "$$file" --set-slug --slug-val "$$slug"

# ## knifes-fm-add-missing: dopln√≠ YAML frontmatter do .md s√∫borov bez FM (idempotentn√©)
.PHONY: knifes-fm-add-missing knifes-fm-add-missing-dry

knifes-fm-add-missing:
	@python3 tools/knife_frontmatter_add_missing.py
	@echo "‚Üí Next: make knifes-guid-backfill knifes-meta-backfill fm-fix knifes-verify"

knifes-fm-add-missing-dry:
	@python3 tools/knife_frontmatter_add_missing.py --dry
#
# -------------------------
# üöÄ Release ‚Äì CI-based (GitHub Actions)
# -------------------------
.PHONY: release-ci
release-ci:
	@echo "üîñ Pripravujem CI release (patch bump + push tag)‚Ä¶"
	@current=$$(node -p "require('./package.json').version"); \
	echo "   Aktu√°lna verzia: $$current"; \
	npm version patch -m "chore(release): %s"; \
	git push && git push --tags; \
	newv=$$(node -p "require('./package.json').version"); \
	echo "‚úÖ Pushnut√Ω tag v$$newv ‚Äì CI workflow sa spust√≠ na serveri";

# Alternat√≠va: d√°tumov√Ω tag (bez z√°sahu do package.json)
.PHONY: release-ci-datetime
release-ci-datetime:
	@echo "üîñ Pripravujem CI release (datetime tag)‚Ä¶"
	@ts=$$(date -u '+%Y%m%d-%H%M'); \
	TAG="v$$ts"; \
	echo "   Tag: $$TAG (UTC)"; \
	git tag -a "$$TAG" -m "release $$ts"; \
	git push origin "$$TAG"; \
#	echo "‚úÖ Pushnut√Ω tag $$TAG ‚Äì CI workflow sa spust√≠ na serveri";

# -------------------------
# üè∑Ô∏è Release helpers ‚Äì local tag & push
# -------------------------

.PHONY: check-version commit push tag push-tag release release-auto release-commit

check-version: ## Over√≠ form√°t verzie (mus√≠ zaƒç√≠na≈• na 'v')
	@printf '%s' "$(VERSION)" | grep -Eq '^v[0-9A-Za-z._-]+$$' \
	|| (echo "‚ùå VERSION mus√≠ zaƒç√≠na≈• na 'v' (napr. v1.0.0 alebo v20250926-0745)" && exit 1)

commit: ## Commit v≈°etk√Ωch zmien s COMMIT_MSG
	@test -n "$(COMMIT_MSG)" || (echo "Pou≈æi: make commit COMMIT_MSG='Popis'" && exit 1)
	git add -A
	git commit -m "$(COMMIT_MSG)"

push: ## Push aktu√°lnej vetvy
	git push origin $(BRANCH)

tag: check-version ## Vytvor√≠ annotated tag lok√°lne
	git tag -a $(VERSION) -m "$(MSG)"

push-tag: check-version ## Pushne tag na origin
	git push origin $(VERSION)

release: check-version ## Tag -> push tag (spust√≠ GH Action Release)
	@echo "üè∑Ô∏è  Tagging $(VERSION) ..."
	$(MAKE) tag VERSION=$(VERSION) MSG="$(MSG)"
	@echo "üöÄ Pushing tag $(VERSION) ..."
	$(MAKE) push-tag VERSION=$(VERSION)
	@echo "‚úÖ üöÄ Release $(VERSION) hotov√Ω."

release-auto: ## Auto verzia vYYYYMMDD-HHMMSSZ
	$(MAKE) release VERSION=$(VERSION) MSG="$(MSG)"

release-commit: check-version ## Commit -> push -> tag -> push tag
	@test -n "$(MSG)" || (echo "MSG je pr√°zdny. Pridaj MSG='...'" && exit 1)
	@echo "üìù Commit & push na $(BRANCH) ..."
	$(MAKE) commit COMMIT_MSG="$(MSG)" || true
	$(MAKE) push
	@echo "üè∑Ô∏è  Tagging & push tag ..."
	$(MAKE) tag VERSION=$(VERSION) MSG="$(MSG)"
	$(MAKE) push-tag VERSION=$(VERSION)
	@echo "‚úÖ üöÄ Release $(VERSION) hotov√Ω."
	
# --- KNIFE automation (config-driven; single point of input = knifes_config.json) ---
.PHONY: knifes-validate knifes-generate knifes-prepare knifes-prepare-strict

knifes-validate:
	@echo "üîé Validujem KNIFES CSV podƒæa knifes_config.json"
	@node scripts/knifes-validate.mjs

knifes-prepare-strict:
	@echo "üîé Validujem KNIFES CSV (strict) podƒæa knifes_config.json"
	@node scripts/knifes-validate.mjs --strict

knifes-generate:
	@echo "üõ†  Generujem KNIFE obsah podƒæa knifes_config.json"
	@node scripts/knifes-generate.mjs

knifes-prepare: knifes-validate knifes-generate
	@echo "‚úÖ CSV OK ‚Üí KNIFE vygenerovan√©."

# -------------------------
# üßæ KNIFES Frontmatter (audit/fix/merge) ‚Äì scripts placeholders
# -------------------------
#
# -------------------------
# üßπ FM Sanitation (remove deprecated keys, normalize quotes)
# -------------------------
.PHONY: knifes-datekey-remove-dry knifes-datekey-remove-apply knifes-smartquotes-scan knifes-smartquotes-fix-dry knifes-smartquotes-fix-apply

## knifes-datekey-remove-dry: DRY ‚Äì remove deprecated 'date:' key from KNIFE index.md
knifes-datekey-remove-dry:
	@echo "üß™ DRY: Removing deprecated 'date:' from KNIFE index.md (no writes)‚Ä¶"
	@if [ ! -f "scripts/knifes-frontmatter-datekey.mjs" ]; then \
	  echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-datekey.mjs"; exit 1; \
	fi
	@node scripts/knifes-frontmatter-datekey.mjs --config $(CONFIG_JSON) --key date --dry

## knifes-datekey-remove-apply: APPLY ‚Äì remove deprecated 'date:' key
knifes-datekey-remove-apply:
	@echo "üõ† APPLY: Removing deprecated 'date:' from KNIFE index.md‚Ä¶"
	@if [ ! -f "scripts/knifes-frontmatter-datekey.mjs" ]; then \
	  echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-datekey.mjs"; exit 1; \
	fi
	@node scripts/knifes-frontmatter-datekey.mjs --config $(CONFIG_JSON) --key date --apply

## knifes-smartquotes-scan: read-only scan for ‚Äúsmart quotes‚Äù in all docs
knifes-smartquotes-scan:
	@echo "üîé SCAN: Hƒæad√°m typografick√© √∫vodzovky v docs/‚Ä¶"
	@rg -n --pcre2 '[‚Äú‚Äù‚Äö‚Äô]' $(DOCS_DIR) || true

## knifes-smartquotes-fix-dry: DRY ‚Äì replace smart quotes with straight quotes (no writes)
knifes-smartquotes-fix-dry:
	@echo "üß™ DRY: smart quotes ‚Üí straight quotes (no writes)‚Ä¶"
	@if [ ! -f "scripts/knifes-frontmatter-quotes.mjs" ]; then \
	  echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-quotes.mjs"; exit 1; \
	fi
	@node scripts/knifes-frontmatter-quotes.mjs --config $(CONFIG_JSON) --dry

## knifes-smartquotes-fix-apply: APPLY ‚Äì replace smart quotes with straight quotes (writes)
knifes-smartquotes-fix-apply:
	@echo "üõ† APPLY: smart quotes ‚Üí straight quotes‚Ä¶"
	@if [ ! -f "scripts/knifes-frontmatter-quotes.mjs" ]; then \
	  echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-quotes.mjs"; exit 1; \
	fi
	@node scripts/knifes-frontmatter-quotes.mjs --config $(CONFIG_JSON) --apply
.PHONY: knifes-frontmatter-audit knifes-frontmatter-fix-dry knifes-frontmatter-fix-apply knifes-frontmatter-merge

knifes-frontmatter-audit:
	@echo "üîé Auditujem Front Matter v KNIFE (read-only)‚Ä¶"
	@if [ ! -f "scripts/knifes-frontmatter-audit.mjs" ]; then \
	  echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-audit.mjs"; exit 1; \
	fi
	@node scripts/knifes-frontmatter-audit.mjs "$(DOCS_DIR)/sk/knifes"

knifes-frontmatter-fix-dry:
	@echo "üß™ DRY-RUN: Front Matter fix (bez z√°pisu)‚Ä¶"
	@if [ ! -f "scripts/knifes-frontmatter-fix.mjs" ]; then \
	  echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-fix.mjs"; exit 1; \
	fi
	@node scripts/knifes-frontmatter-fix.mjs --config $(CONFIG_JSON) --dry

knifes-frontmatter-fix-apply:
	@echo "üõ† APPLY: Front Matter fix (zap√≠≈°e)‚Ä¶"
	@if [ ! -f "scripts/knifes-frontmatter-fix.mjs" ]; then \
	  echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-fix.mjs"; exit 1; \
	fi
	@node scripts/knifes-frontmatter-fix.mjs --config $(CONFIG_JSON) --apply

knifes-frontmatter-merge:
	@echo "üîó Merge Front Matter (config-driven)‚Ä¶"
	@if [ ! -f "scripts/knifes-frontmatter-merge.mjs" ]; then \
	  echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-merge.mjs"; exit 1; \
	fi
	@node scripts/knifes-frontmatter-merge.mjs --config $(CONFIG_JSON) --csv $(CSV_OVERVIEW)

## knifes-frontmatter-audit-id: Audit iba pre jedno KNIFE ID (id=K000059)
.PHONY: knifes-frontmatter-audit-id
knifes-frontmatter-audit-id:
	@if [ -z "$(id)" ]; then echo "Pou≈æi: make knifes-frontmatter-audit-id id=K000059"; exit 2; fi
	@echo "üîé Auditujem Front Matter pre ID=$(id) (read-only)‚Ä¶"
	@if [ ! -f "scripts/knifes-frontmatter-audit.mjs" ]; then \
	  echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-audit.mjs"; exit 1; \
	fi
	@# audit podporuje argument root dir; filtrujeme cez id6 prefiks prieƒçinka
	@DIR="$(DOCS_DIR)/sk/knifes/$$(echo $(id) | tr 'A-Z' 'a-z')-*"; \
	if compgen -G "$$DIR" > /dev/null; then \
	  node scripts/knifes-frontmatter-audit.mjs "$$(dirname $$DIR)"; \
	else \
	  echo "‚ùå Nena≈°iel som prieƒçinok pre $(id) pod docs/sk/knifes"; exit 1; \
	fi

## knifes-frontmatter-fix-id-dry: DRY-RUN fix iba pre jedno ID
.PHONY: knifes-frontmatter-fix-id-dry
knifes-frontmatter-fix-id-dry:
	@if [ -z "$(id)" ]; then echo "Pou≈æi: make knifes-frontmatter-fix-id-dry id=K000059"; exit 2; fi
	@echo "üß™ DRY-RUN: FM fix pre ID=$(id)‚Ä¶"
	@if [ ! -f "scripts/knifes-frontmatter-fix.mjs" ]; then \
	  echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-fix.mjs"; exit 1; \
	fi
	@node scripts/knifes-frontmatter-fix.mjs --dry --id $(id)

## knifes-frontmatter-fix-id-apply: APPLY fix iba pre jedno ID
.PHONY: knifes-frontmatter-fix-id-apply
knifes-frontmatter-fix-id-apply:
	@if [ -z "$(id)" ]; then echo "Pou≈æi: make knifes-frontmatter-fix-id-apply id=K000059"; exit 2; fi
	@echo "üõ† APPLY: FM fix pre ID=$(id)‚Ä¶"
	@if [ ! -f "scripts/knifes-frontmatter-fix.mjs" ]; then \
	  echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-fix.mjs"; exit 1; \
	fi
	@node scripts/knifes-frontmatter-fix.mjs --apply --id $(id)

# -------------------------
# üîó Slug tools (report/comment/delete) ‚Äì separate script
# -------------------------
.PHONY: knifes-frontmatter-slug-report knifes-frontmatter-slug-comment-dry knifes-frontmatter-slug-comment-apply knifes-frontmatter-slug-delete-dry knifes-frontmatter-slug-delete-apply

knifes-frontmatter-slug-report:
	@echo "üîé SLUG REPORT (id=$(id) scope=$(scope))"
	@if [ ! -f "scripts/knifes-frontmatter-slug.mjs" ]; then \
	  echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-slug.mjs"; exit 1; \
	fi
	@node scripts/knifes-frontmatter-slug.mjs --config $(CONFIG_JSON) --action report --scope $(if $(scope),$(scope),index) $(if $(id),--id $(id),) --dry

knifes-frontmatter-slug-comment-dry:
	@echo "üß™ DRY: SLUG comment (id=$(id) scope=$(scope))"
	@if [ ! -f "scripts/knifes-frontmatter-slug.mjs" ]; then \
	  echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-slug.mjs"; exit 1; \
	fi
	@node scripts/knifes-frontmatter-slug.mjs --config $(CONFIG_JSON) --action comment --scope $(if $(scope),$(scope),index) $(if $(id),--id $(id),) --dry

knifes-frontmatter-slug-comment-apply:
	@echo "üõ† APPLY: SLUG comment (id=$(id) scope=$(scope))"
	@if [ ! -f "scripts/knifes-frontmatter-slug.mjs" ]; then \
	  echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-slug.mjs"; exit 1; \
	fi
	@node scripts/knifes-frontmatter-slug.mjs --config $(CONFIG_JSON) --action comment --scope $(if $(scope),$(scope),index) $(if $(id),--id $(id),) --apply

knifes-frontmatter-slug-delete-dry:
	@echo "üß™ DRY: SLUG delete (id=$(id) scope=$(scope))"
	@if [ ! -f "scripts/knifes-frontmatter-slug.mjs" ]; then \
	  echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-slug.mjs"; exit 1; \
	fi
	@node scripts/knifes-frontmatter-slug.mjs --config $(CONFIG_JSON) --action delete --scope $(if $(scope),$(scope),index) $(if $(id),--id $(id),) --dry

knifes-frontmatter-slug-delete-apply:
	@echo "üõ† APPLY: SLUG delete (id=$(id) scope=$(scope))"
	@if [ ! -f "scripts/knifes-frontmatter-slug.mjs" ]; then \
	  echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-slug.mjs"; exit 1; \
	fi
	@node scripts/knifes-frontmatter-slug.mjs --config $(CONFIG_JSON) --action delete --scope $(if $(scope),$(scope),index) $(if $(id),--id $(id),) --apply

# -------------------------
# üî¢ KNIFE ID6 Migration (K### ‚Üí K######) ‚Äì separate script
# -------------------------
.PHONY: knifes-id6-dry knifes-id6-apply knifes-id6-audit

knifes-id6-dry:
	@echo "üß™ DRY-RUN: ID6 migration (id=$(id))"
	@if [ ! -f "scripts/knifes-frontmatter-id6.mjs" ]; then \
	  echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-id6.mjs"; exit 1; \
	fi
	@node scripts/knifes-frontmatter-id6.mjs --config $(CONFIG_JSON) --dry $(if $(id),--id $(id),)

knifes-id6-apply:
	@echo "üõ† APPLY: ID6 migration (id=$(id))"
	@if [ ! -f "scripts/knifes-frontmatter-id6.mjs" ]; then \
	  echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-id6.mjs"; exit 1; \
	fi
	@node scripts/knifes-frontmatter-id6.mjs --config $(CONFIG_JSON) --apply $(if $(id),--id $(id),)

knifes-id6-audit:
	@echo "üîç AUDIT: ID6 migration ‚Äì post-check"
	@if [ ! -f "scripts/knifes-frontmatter-id6.mjs" ]; then \
	  echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-id6.mjs"; exit 1; \
	fi
	@node scripts/knifes-frontmatter-id6.mjs --config $(CONFIG_JSON) --audit
# -------------------------
# üìê K18 Baseline ‚Äì 3-krokov√Ω flow (Audit ‚Üí Fix ‚Üí Verify)
# -------------------------
.PHONY: k18-audit k18-fix-dry k18-fix-apply k18-verify k18-align-dry k18-align-apply

k18-audit:
	@echo "üîé K18 AUDIT (read-only)‚Ä¶"
	@if [ ! -f "scripts/knifes-frontmatter-audit.mjs" ]; then echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-audit.mjs"; exit 1; fi
	@node scripts/knifes-frontmatter-audit.mjs "$(DOCS_DIR)/sk/knifes"

k18-fix-dry:
	@echo "üß™ K18 FIX (DRY-RUN)‚Ä¶"
	@if [ ! -f "scripts/knifes-frontmatter-fix.mjs" ]; then echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-fix.mjs"; exit 1; fi
	@node scripts/knifes-frontmatter-fix.mjs --config $(CONFIG_JSON) --dry

k18-fix-apply:
	@echo "üõ† K18 FIX (APPLY)‚Ä¶"
	@if [ ! -f "scripts/knifes-frontmatter-fix.mjs" ]; then echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-fix.mjs"; exit 1; fi
	@node scripts/knifes-frontmatter-fix.mjs --config $(CONFIG_JSON) --apply

k18-verify: k18-audit knifes-verify-frontmatter
	@echo "‚úÖ K18 VERIFY hotovo."

k18-align-dry:
	@$(MAKE) k18-audit
	@$(MAKE) k18-fix-dry
	@$(MAKE) k18-audit
	@echo "üß™ K18 align DRY sekvencia dokonƒçen√°."

k18-align-apply:
	@$(MAKE) k18-fix-apply
	@$(MAKE) k18-verify
	@echo "üéâ K18 align APPLY sekvencia dokonƒçen√°."

# -------------------------
# üìö KNIFES_REF tooling (audit + alignment placeholders)
# -------------------------
.PHONY: knifes-ref-audit knifes-ref-align-dry knifes-ref-align-apply

knifes-ref-audit:
	@echo "üîé Auditujem KNIFES_REF (read-only)‚Ä¶"
	@if [ ! -f "scripts/knifes-frontmatter-audit.mjs" ]; then echo "‚ùå Ch√Ωba scripts/knifes-frontmatter-audit.mjs"; exit 1; fi
	@node scripts/knifes-frontmatter-audit.mjs "$(KNIFES_REF_DIR)"

knifes-ref-align-dry:
	@echo "üß™ KNIFES_REF align (DRY)‚Ä¶"
	@$(MAKE) knifes-ref-audit
	@echo "‚ÑπÔ∏è  Placeholder: sem dopln√≠me DRY fix pre KNIFES_REF (keƒè bude pripraven√Ω)."
	@$(MAKE) knifes-ref-audit
	@echo "üß™ KNIFES_REF align DRY sekvencia dokonƒçen√°."

knifes-ref-align-apply:
	@echo "üõ† KNIFES_REF align (APPLY)‚Ä¶"
	@echo "‚ÑπÔ∏è  Placeholder: sem dopln√≠me APPLY fix pre KNIFES_REF (keƒè bude pripraven√Ω)."
	@$(MAKE) knifes-ref-audit
	@echo "üéâ KNIFES_REF align APPLY sekvencia dokonƒçen√°."
# -------------------------
# üß© KNIFES Gen New (CSV ‚Üí MD, seed-only, new script)
# -------------------------
.PHONY: knifes-gen-dry knifes-gen-apply

## knifes-gen-dry: DRY-RUN generation (CSV‚ÜíMD, seed-only)
knifes-gen-dry:
	@KNIFE_CSV="$(KNIFE_CSV)"; if [ -z "$$KNIFE_CSV" ]; then KNIFE_CSV="$(strip $(CSV_OVERVIEW))"; fi; \
	KNIFE_OUT="$(KNIFE_OUT)"; if [ -z "$$KNIFE_OUT" ]; then KNIFE_OUT="docs/sk/knifes"; fi; \
	echo "üß™ [UAT] DRY-RUN generation (CSV‚ÜíMD, seed-only) [$$(date -u +'%Y-%m-%d %H:%M:%S UTC')] ‚Äì CSV='$$KNIFE_CSV' OUT='$$KNIFE_OUT'"; \
	node scripts/knifes-gen-new.mjs --csv "$$KNIFE_CSV" --out "$$KNIFE_OUT" --dry-run

## knifes-gen-apply: APPLY generation (CSV‚ÜíMD, seed-only)
knifes-gen-apply:
	@KNIFE_CSV="$(KNIFE_CSV)"; if [ -z "$$KNIFE_CSV" ]; then KNIFE_CSV="$(strip $(CSV_OVERVIEW))"; fi; \
	KNIFE_OUT="$(KNIFE_OUT)"; if [ -z "$$KNIFE_OUT" ]; then KNIFE_OUT="docs/sk/knifes"; fi; \
	echo "‚öôÔ∏è [UAT] APPLY generation (CSV‚ÜíMD, seed-only) [$$(date -u +'%Y-%m-%d %H:%M:%S UTC')] ‚Äì CSV='$$KNIFE_CSV' OUT='$$KNIFE_OUT'"; \
	node scripts/knifes-gen-new.mjs --csv "$$KNIFE_CSV" --out "$$KNIFE_OUT"


# -------------------------
# üßæ CSV Scan & Fix (NEW 2025-10-05)
# -------------------------
.PHONY: knifes-csv-scan knifes-fix-csv-dry knifes-fix-csv-apply

## knifes-csv-scan: Scan docs ‚Üí CSV snapshot (timestamped)
knifes-csv-scan:
	@TS="$$(date -u +'%Y-%m-%d %H:%M:%S UTC')"; \
	echo "üîé SCAN [$${TS}] ‚Üí DIR='$(KNIFES_DIR)' OUT='$(OUT_DIR)' CSV_REF='$(strip $(CSV_OVERVIEW))'"; \
	node scripts/knifes-csv-scan.mjs --dir "$(KNIFES_DIR)" --outdir "$(OUT_DIR)" --csv "$(strip $(CSV_OVERVIEW))"

## knifes-fix-csv-dry: DRY-RUN fill-only merge (MD ‚Üí CSV)
knifes-fix-csv-dry:
	@TS="$$(date -u +'%Y-%m-%d %H:%M:%S UTC')"; \
	echo "üß™ FIX CSV DRY [$${TS}] ‚Üí IN='$(strip $(CSV_OVERVIEW))' OUTDIR='$(OUT_DIR)'"; \
	node scripts/knifes-fix-csv.mjs --dir "$(KNIFES_DIR)" --csv "$(strip $(CSV_OVERVIEW))" --outdir "$(OUT_DIR)" --dry-run

## knifes-fix-csv-apply: APPLY fill-only merge (MD ‚Üí CSV) ‚Üí writes new timestamped file
knifes-fix-csv-apply:
	@TS="$$(date -u +'%Y-%m-%d %H:%M:%S UTC')"; \
	echo "‚öôÔ∏è  FIX CSV APPLY [$${TS}] ‚Üí IN='$(strip $(CSV_OVERVIEW))' OUTDIR='$(OUT_DIR)'"; \
	node scripts/knifes-fix-csv.mjs --dir "$(KNIFES_DIR)" --csv "$(strip $(CSV_OVERVIEW))" --outdir "$(OUT_DIR)"