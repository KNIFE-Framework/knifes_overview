#!/usr/bin/env python3
"""
KNIFE Python-only generator
- No YAML parsing. Pure string templating.
- Cross-platform paths.
- DRY and FORCE modes.
"""
import argparse, os, re, sys, uuid, datetime

def slugify(name: str) -> str:
    s = name.strip().lower()
    s = re.sub(r"[^a-z0-9._-]+", "-", s)
    s = re.sub(r"-+", "-", s)
    return s.strip("-")

def abspath(p: str) -> str:
    return os.path.abspath(os.path.expandvars(os.path.expanduser(p)))

def read_text(path: str) -> str:
    with open(path, "r", encoding="utf-8") as f:
        return f.read()

def write_text(path: str, content: str) -> None:
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        f.write(content)

def replace_kv_line(doc: str, key: str, new_value_quoted: str) -> str:
    """
    Replace a YAML key's quoted string value on its own line (non-invasive).
    Matches lines like:
      title: "Something"
    and replaces the whole line with:
      title: "New Value"
    """
    pattern = rf'(?m)^(?P<k>{re.escape(key)}\s*:\s*)"(?:[^"\\]|\.|)*"\s*$'
    repl = rf'\g<k>{new_value_quoted}'
    return re.sub(pattern, repl, doc)

def ensure_guid(doc: str) -> str:
    # Replace placeholder GUID if present, otherwise inject/replace a guid line.
    guid_re = r'(?m)^guid:\s*"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx"\s*$'
    if re.search(guid_re, doc):
        return re.sub(guid_re, f'guid: "{uuid.uuid4()}"', doc)
    # If a guid line exists with any value, leave it; otherwise insert after id if possible.
    if re.search(r'(?m)^guid:\s*".*"\s*$', doc):
        return doc
    # Try insert after id line
    id_match = re.search(r'(?m)^id:\s*".*"\s*$', doc)
    if id_match:
        idx = id_match.end()
        return doc[:idx] + '\n' + f'guid: "{uuid.uuid4()}"' + doc[idx:]
    # Fallback: append before closing FM if present
    fm_end = doc.find('\n---', 0)
    if fm_end != -1:
        return doc[:fm_end] + '\n' + f'guid: "{uuid.uuid4()}"' + doc[fm_end:]
    return doc

def set_id(doc: str, kid: str) -> str:
    # Replace KXXXXXXX placeholder if present, else replace id line if exists.
    doc = re.sub(r'(?m)^id:\s*"KXXXXXXX"\s*$', f'id: "{kid}"', doc)
    doc = re.sub(r'(?m)^id:\s*".*"\s*$', f'id: "{kid}"', doc, count=1)
    return doc

def maybe_set_locale(doc: str, locale: str | None) -> str:
    if not locale:
        return doc
    # Replace only if line exists; do not inject if missing.
    return re.sub(r'(?m)^locale:\s*".*"\s*$', f'locale: "{locale}"', doc, count=1)

def set_fm_build_now(doc: str) -> str:
    now_iso = datetime.datetime.utcnow().replace(microsecond=0).isoformat() + "Z"
    pattern = r'(?m)^fm_build:\s*".*"\s*$'
    if re.search(pattern, doc):
        return re.sub(pattern, f'fm_build: "{now_iso}"', doc, count=1)
    return doc

def main():
    ap = argparse.ArgumentParser(description="Create KNIFE entry (Python-only, string templating).")
    ap.add_argument("--id", required=True, help="KNIFE ID (e.g., K000123)")
    ap.add_argument("--name", required=True, help="Human folder name")
    ap.add_argument("--title", help="Full title; defaults to --name")
    ap.add_argument("--template", default="core/templates/system/FM-Core.md")
    ap.add_argument("--outroot", default="content/docs/sk/knifes")
    ap.add_argument("--locale", help="Override locale value in FM (optional)")
    ap.add_argument("--dry", action="store_true")
    ap.add_argument("--force", action="store_true")
    args = ap.parse_args()

    title_val = (args.title or args.name).strip()
    safe = slugify(args.name)
    scripts_cwd = os.getcwd()  # informational
    template_path = abspath(args.template)
    outroot_path = abspath(args.outroot)
    target_dir = os.path.join(outroot_path, safe)
    target_md = os.path.join(target_dir, "index.md")

    print(f"ARGS: id={args.id} name='{args.name}' title='{title_val}' safe='{safe}'")
    print(f"PATHS: cwd='{scripts_cwd}' template='{template_path}' outroot='{outroot_path}'")

    if not os.path.isfile(template_path):
        print(f"‚ùå Missing template file: {template_path}")
        sys.exit(2)

    # Compose content from template (pure string ops)
    doc = read_text(template_path)

    # Standard replacements (non-invasive)
    doc = set_id(doc, args.id)
    doc = replace_kv_line(doc, "title", f'"{title_val}"')
    doc = ensure_guid(doc)
    doc = set_fm_build_now(doc)
    if args.locale:
        doc = maybe_set_locale(doc, args.locale)

    # Prepend user header
    now_iso = datetime.datetime.utcnow().replace(microsecond=0).isoformat() + "Z"
    header = f"<!-- Auto-generated by KNIFE Python Generator on {now_iso} -->\n"
    content = header + "\n" + doc.strip() + "\n\n"

    if args.dry:
        print("üß™ DRY CHECK:")
        print(f"   ‚úÖ OK ‚Äì would create: {target_md}")
        print("   Preview (first 10 lines):")
        preview = "\n".join(content.splitlines()[:10])
        print(preview)
        sys.exit(0)

    # Real mode
    if os.path.exists(target_md) and not args.force:
        print(f"‚ùå Target exists: {target_md} (use --force to overwrite)")
        sys.exit(3)

    write_text(target_md, content)
    print(f"‚úÖ Created/updated: {target_md}")

if __name__ == "__main__":
    main()
